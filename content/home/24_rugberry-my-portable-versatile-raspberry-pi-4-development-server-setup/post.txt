Title: RugBerry‚ÄîMy portable & versatile Raspberry Pi 4 development server setup

----

Text:

The general idea for an (link: https://www.raspberrypi.com/ text: Raspberry Pi) based portable development setup is not new.

As an example: I stumbled upon‚Äîand was intrigued right away by‚Äîa video on the YouTube channel *Tech Craft* ((link: https://twitter.com/tech_crafted text: @tech_crafted) on the bird site) titled (link: https://www.youtube.com/watch?v=IR6sDcKo3V8 text: My Favourite iPad Pro Accessory: The Raspberry Pi 4) .

Though, as I'm clearly (still) not a iPad/ Table person, my particular setup is centered around my main driver, a Linux-based laptop‚Äîin particular my ultra-portable (link: https://openwebcraft.com/elementary-os-6-odin-on-12-macbook8-1/ text: MacBook 12").

Disclaimer: this write up is still a WORK IN PROGRESS as I'm documenting along the how-to and setup of it's evolving experience‚Ä¶

(image: rugberry_coolmaster_picase40_raspberrypi_4_model_b_8gb_macbook81.jpg)

So, without furher ado, here are the incredients of my particular setup‚Äîso far:

1. Hardware

- (link: https://www.raspberrypi.com/products/raspberry-pi-4-model-b/ text: Raspberry Pi 4 Model B), the **8GB RAM model**
- (link: https://www.coolermaster.com/catalog/legacy-products/cases/pi-case-40/ text: Cooler Master's Pi Case 40) (I backed the intial (link: https://www.kickstarter.com/projects/coolermaster/pi-case-40/ text: Kickstarter Campaign))
- SanDisk Ultra microSDXC UHS-I SD-Card 512 GB

2. Software

- First things first: install Raspberry Pi OS Lite, 64-bit, these days simply by using the great (link: https://www.raspberrypi.com/software/ text: Imager software); also levereaging the **Advanced Options**  for setting hostname (`rugberry`), enabling SSH only allowing public-key authentication (of course!), configuring Wifi, applying locale settings.

- Install PIXEL Desktop:

```
sudo apt install raspberrypi-ui-mods
```

- Install VNC Server

Doc ref: (link: https://www.raspberrypi.com/documentation/computers/remote-access.html#virtual-network-computing-vnc text: raspberrypi.com, Documentation: Remote Access, VNC)

```
sudo apt install realvnc-vnc-server
sudo raspi-config
```

- Install  **Pi Tool**, the all-in-one Software Utility for Cooler Master's Pi Case 40

> The utility allows users **access to a basic set of overclocking profiles**, tested and validated based on the thermal performance of Cooler Master's Pi Case 40 enclosure, **monitoring of system metrics**, and **assignment of multiple functions to the built-in button**.
> ‚ÄîSrc:  (link: https://www.coolermaster.com/catalog/legacy-products/cases/pi-case-40/ text: coolermaster.com)

```
# Install currently missing dependencies of Raspberry Pi OS (Lite) 64-bit image:
sudo apt install -y libdbusmenu-glib4 libdbusmenu-gtk4 libfontconfig1

wget http.us.debian.org/debian/pool/main/libi/libindicator/libindicator7_0.5.0-4_arm64.deb
sudo dpkg -i libindicator7_0.5.0-4_arm64.deb

# Install Pi Tool
curl https://raw.githubusercontent.com/CoolerMasterTechnology/pi-tool/master/install.sh -o pi-tool-install.sh
chmod +x pi-tool-install.sh
./pi-tool-install.sh
```

- Configure the Raspberry Pi as a USB-C Gadget following the simple steps in this well done (link: https://www.hardill.me.uk/wordpress/2019/11/02/pi4-usb-c-gadget/ text: guide).

- Install Samba (SMB/CIFS), Server and Client

Doc ref: (link: https://www.raspberrypi.com/documentation/computers/remote-access.html#samba-smbcifs text: raspberrypi.com, Documentation: Remote Access, Samba (SMB/CIFS))

```
sudo apt install samba samba-common-bin smbclient cifs-utils
sudo smbpasswd -a matthias

# sudo vi /etc/samba/smb.conf

[Shared]
    path = /home/matthias/Shared
    read only = no
    public = yes
    writable = yes

[Code]
   path = /home/matthias/Code
    read only = no
    public = no
    writable = yes
    
sudo systemctl restart smbd
```

- Install (link: https://webmin.com/ text: Webmin)

Doc ref: (link: https://webmin.com/deb.html text: webmin.com, Installing on Debian)

```
wget http://prdownloads.sourceforge.net/webadmin/webmin_1.984_all.deb
sudo dpkg -i webmin_1.984_all.deb; sudo apt install -f
# https://rugberry:10000/
```

- Install Docker, Docker Compose

1. Docker ‚Äî‚Ä∫ follow along  (link: https://docs.docker.com/engine/install/debian/ text: docs.docker.com, Install Docker Engine on Debian) and (link: https://docs.docker.com/engine/install/linux-postinstall/ text: docs.docker.com, Post-installation steps for Linux).
2. Docker Compose ‚Äî‚Ä∫ follow along (link: https://docs.docker.com/compose/install/ text: doc.docker.com, Install Docker Compose ‚Äî **Alternative install options** (via `pip3`)).

```
sudo apt install libffi-dev libssl-dev
sudo apt install -y python3 python3-dev python3-pip
sudo pip3 install docker-compose
```

- Install Chromium (64-bit)

‚Ä¶w/ out *WidevineCDM* library and therefore, it is not possible to play streaming media such as Netflix or Disney+. But who cares anyway ü§∑Ô∏è

```
sudo apt install chromium-browser:arm64
``` 

To be continued‚Ä¶

## Todos

- Upgrade 32GB SD-Card to SanDisk Ultra microSDXC UHS-I SD-Card **512 GB** and use Raspberry Pi OS **Full** (instead of Lite)‚Äîalso, while at it, let's go full disk encryption an re-base on (link: https://www.kali.org/ text: Kali Linux) (Doc refs: (link: https://www.kali.org/docs/arm/raspberry-pi-4/ text: kali.org Kali on ARM, Raspberry Pi 4), (link: https://www.kali.org/docs/arm/raspberry-pi-with-luks-full-disk-encryption/ text: kali.org: Rpi Disk Encryption))  ü§îÔ∏è
- Setup internet/ network sharing from host, via USB
- Create Ansible playbook for setup
- Eval (link: https://github.com/gitpod-io/openvscode-server text: OpenVSCode Server)

----

Published: 2022-02-05

----

Feedurl: https://openwebcraft.com/rugberry-my-portable-versatile-raspberry-pi-4-development-server-setup